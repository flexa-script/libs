// arrays standard lib
// MIT License
// Copyright (c) 2024 Carlos Eduardo de Borba Machado

namespace flx;

fun slice(arr: any[], start: int, end: int = 0): any[] {
	var size = len(arr);

	if (start > size) {
		return {};
	}

	if (end == 0 and size > 0) {
		end = size - 1;
	}

	var sliced: any[end - start + 1] = {};
	var si = 0;

	for (var i = start; i <= end; i++) {
		sliced[si] = arr[i];
		si++;
	}

	return sliced;
}

fun remove_at(arr: any[], at: int): any[] {
	if (at == 0) {
		return slice(arr, 1);
	}

	return slice(arr, 0, at - 1) + slice(arr, at + 1);
}

fun remove(arr: any[]): any[] {
	return slice(arr, 0, len(arr) - 2);
}

fun append_at(arr: any[], value: any, at: int): any[] {
	if (at == 0) {
		return { value } + arr;
	}

	return slice(arr, 0, at - 1) + { value } + slice(arr, at);
}

fun append(arr: any[], value: any): any[] {
	arr += { value };
	return arr;
}

fun dequeue(arr: any[]): any[] {
	return remove_at(arr, 0);
}

fun enqueue(arr: any[], value: any): any[] {
	return append(arr, value);
}

fun front(arr: any[]): any {
	return arr[0];
}

fun back(arr: any[]): any {
	return arr[len(arr) - 1];
}

fun pop(arr: any[]): any[] {
	return remove(arr);
}

fun push(arr: any[], value: any): any[] {
	return append(arr, value);
}

fun peek(arr: any[]): any {
	return back(arr);
}

fun contains(arr: any[], cval: any): bool {
	foreach (var v in arr) {
		if (v == cval) {
			return true;
		}
	}
	return false;
}

// temporary, it will be changed to quick sort
fun sort(arr: any[], comparator: function = null): any[] {
	var arr_size = len(arr);
	for (var j = 0; j < arr_size; j++) {
		for (var i = 0; i < arr_size - 1; i++) {
			var res = false;

			if (comparator != null) {
				res = comparator(arr[i], arr[i + 1]);
			} else {
				res = arr[i] > arr[i + 1];
			}

			if (res) {
				var aux = arr[i + 1];
				arr[i + 1] = arr[i];
				arr[i] = aux;
			}
		}
	}
	return arr;
}

fun reverse(arr: any[]): any[] {
	var arr_size = len(arr);
	var rarr: any[arr_size] = {null};
	var ri = 0;
	for (var i = arr_size - 1; i >= 0; i--) {
		rarr[ri] = arr[i];
		ri++;
	}
	return rarr;
}
