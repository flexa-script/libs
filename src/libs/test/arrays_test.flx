// MIT License
// Copyright (c) 2023 Carlos Eduardo de Borba Machado

using flx.std.testing;
using flx.std.arrays;

include namespace flx;

fun append_at_end() {
	// arrange
	var arr = {1, 2, 3, 4, 5};
	
	// act
	var res = append_at(arr, 6, 5);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5, 6}, res);
}

fun append_at_midle() {
	// arrange
	var arr = {1, 2, 3, 5, 6};
	
	// act
	var res = append_at(arr, 4, 3);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5, 6}, res);
}

fun append_at_start() {
	// arrange
	var arr = {2, 3, 4, 5, 6};
	
	// act
	var res = append_at(arr, 1, 0);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5, 6}, res);
}

fun append_default() {
	// arrange
	var arr = {1, 2, 3, 4, 5};
	
	// act
	var res = append(arr, 6);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5, 6}, res);
}

fun remove_default() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = remove(arr);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5}, res);
}

fun remove_at_out() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = remove_at(arr, 6);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5, 6}, res);
}

fun remove_at_midle() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = remove_at(arr, 2);
	
	// assert
	assert_equals(this, {1, 2, 4, 5, 6}, res);
}

fun remove_at_start() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = remove_at(arr, 0);
	
	// assert
	assert_equals(this, {2, 3, 4, 5, 6}, res);
}

fun remove_at_end() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = remove_at(arr, 5);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5}, res);
}

fun slice_endless() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = slice(arr, 1);
	
	// assert
	assert_equals(this, {2, 3, 4, 5, 6}, res);
}

fun slice_end() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = slice(arr, 1, 5);
	
	// assert
	assert_equals(this, {2, 3, 4, 5, 6}, res);
}

fun slice_start() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = slice(arr, 0, 4);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5}, res);
}

fun slice_midle() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res = slice(arr, 1, 4);
	
	// assert
	assert_equals(this, {2, 3, 4, 5}, res);
}

fun contains() {
	// arrange
	var val = 3;
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res: bool = contains(arr, val);
	
	// assert
	assert_true(this, res);
}

fun contains_start() {
	// arrange
	var val = 1;
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res: bool = contains(arr, val);
	
	// assert
	assert_true(this, res);
}

fun contains_end() {
	// arrange
	var val = 6;
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res: bool = contains(arr, val);
	
	// assert
	assert_true(this, res);
}

fun not_contains() {
	// arrange
	var val = 10;
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res: bool = contains(arr, val);
	
	// assert
	assert_false(this, res);
}

fun sort_default() {
	// arrange
	var arr = {6, 5, 4, 3, 2, 1};
	
	// act
	var res: any[] = sort(arr);
	
	// assert
	assert_equals(this, {1, 2, 3, 4, 5, 6}, res);
}

fun sort_shuffled() {
	// arrange
	var arr = {5, 5, 1, 3, 9, 10, 2, 20, 4, 6, 9, 0, 8, 7};
	
	// act
	var res: any[] = sort(arr);
	
	// assert
	assert_equals(this, {0, 1, 2, 3, 4, 5, 5, 6, 7, 8, 9, 9, 10, 20}, res);
}

fun reverse_default() {
	// arrange
	var arr = {1, 2, 3, 4, 5, 6};
	
	// act
	var res: any[] = reverse(arr);
	
	// assert
	assert_equals(this, {6, 5, 4, 3, 2, 1}, res);
}

fun reverse_palindrome() {
	// arrange
	var arr = {1, 2, 3, 3, 2, 1};
	
	// act
	var res: any[] = reverse(arr);
	
	// assert
	assert_equals(this, {1, 2, 3, 3, 2, 1}, res);
}

fun arrays_test_suite() {
	append_default();
	append_at_start();
	append_at_midle();
	append_at_end();
	remove_at_start();
	remove_at_midle();
	remove_at_end();
	remove_at_out();
	remove_default();
	slice_start();
	slice_midle();
	slice_end();
	slice_endless();
	contains();
	contains_start();
	contains_end();
	not_contains();
	sort_default();
	sort_shuffled();
	reverse_default();
	reverse_palindrome();
}
